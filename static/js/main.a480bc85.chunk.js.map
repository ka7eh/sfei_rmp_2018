{"version":3,"sources":["config.js","containers/Map.js","containers/Dashboard/index.jsx","containers/App.js","index.js"],"names":["config","TOTAL_YEARS","START_YEAR","SPECIES_RESULT_RANGE","SPECIES_THRESHOLDS","Largemouth Bass","Pacific Staghorn Sculpin","Striped Bass","Top Smelt","CONFIG","END_YEAR","THRESHOLD_LINES","Object","entries","map","_ref","idx","_ref2","slicedToArray","threshold","type","x0","y0","x1","y1","line","color","width","dash","SPECIES_BAR_DATA","SPECIES_BOX_DATA","SPECIES_DATA","forEach","_ref3","_ref4","year","sp","sort","_ref5","_ref6","name","y","_ref7","_ref8","reduce","data","_ref9","_ref10","result","x","push","r1","r2","length","Dashboard","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleYearChange","e","_ref11","activePage","showYear","setState","datarevision","state","toggleAutoPlay","autoPlay","setInterval","clearInterval","_this$state","ReactDOM","createPortal","react_default","a","createElement","Segment","basic","textAlign","Header","Pagination","boundaryRange","siblingRange","ellipsisItem","firstItem","lastItem","totalPages","onPageChange","Button","primary","icon","style","marginLeft","onClick","react_plotly_default","layout","height","title","showlegend","barmode","yaxis","range","shapes","displayModeBar","document","getElementById","React","Component","App","isMapReady","L","setView","Control","extend","onAdd","container","DomUtil","create","id","DomEvent","disableClickPropagation","disableScrollPropagation","dashboard","position","addTo","tileLayer","attribution","layerGroup","layers","_loop","geoJSON","SAMPLING_DATA","filter","feature","properties","radius","fillColor","pointToLayer","latlng","circleMarker","weight","opacity","fillOpacity","clearLayers","addLayer","initMap","Fragment","containers_Dashboard","render","containers_App"],"mappings":"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","file":"static/js/main.a480bc85.chunk.js","sourcesContent":["export default {\n    TOTAL_YEARS: 24,\n    START_YEAR: 1994,\n    SPECIES_RESULT_RANGE: [0, 6.7],\n    SPECIES_THRESHOLDS: {\n        'Largemouth Bass': 1,\n        'Pacific Staghorn Sculpin': 2,\n        'Striped Bass': 5,\n        'Top Smelt': 3\n    }\n}\n","import L from 'leaflet'\n\nimport 'leaflet/dist/leaflet.css'\n\nimport SAMPLING_DATA from '../data/bay_area_mercury_samples.json'\nimport CONFIG from '../config'\n\nconst { START_YEAR, TOTAL_YEARS } = CONFIG\nconst END_YEAR = START_YEAR + TOTAL_YEARS\n\nexport default () => {\n    const map = L\n        .map('Map')\n        .setView(\n            [37.6403, -122.4165],\n            9\n        )\n\n    L.Control.Dashboard = L.Control.extend({\n        onAdd: function (map) {\n            const container = L.DomUtil.create('div')\n            container.id = 'Dashboard'\n            L.DomEvent.disableClickPropagation(container)\n            L.DomEvent.disableScrollPropagation(container)\n            return container\n        }\n    })\n\n    map.dashboard = new L.Control.Dashboard({ position: 'bottomleft' })\n    map.dashboard.addTo(map)\n\n    L\n        .tileLayer(\n            'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',\n            {\n                attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n            }\n        )\n        .addTo(map)\n\n    const layerGroup = L.layerGroup()\n    layerGroup.addTo(map)\n\n    const layers = {}\n    for (let year = START_YEAR; year < END_YEAR; year++) {\n        layers[year] = L\n            .geoJSON(\n                SAMPLING_DATA,\n                {\n                    filter: (feature) => {\n                        return feature.properties.year === year\n                    },\n                    style: (feature) => {\n                        const { result } = feature.properties\n                        if (result <= 0.011) {\n                            return {\n                                radius: 5,\n                                color: '#ffffb2',\n                                fillColor: '#ffffb2'\n                            }\n                        } else if (result <= 4.37) {\n                            return {\n                                radius: 10,\n                                color: '#fecc5c',\n                                fillColor: '#fecc5c'\n                            }\n                        } else if (result <= 11.2) {\n                            return {\n                                radius: 15,\n                                color: '#fd8d3c',\n                                fillColor: '#fd8d3c'\n                            }\n                        } else if (result <= 34.16) {\n                            return {\n                                radius: 20,\n                                color: '#f03b20',\n                                fillColor: '#f03b20'\n                            }\n                        } else {\n                            return {\n                                radius: 25,\n                                color: '#bd0026',\n                                fillColor: '#bd0026'\n                            }\n                        }\n                    },\n                    pointToLayer: (feature, latlng) => {\n                        return L.circleMarker(\n                            latlng,\n                            {\n                                weight: 1,\n                                opacity: 1,\n                                fillOpacity: 0.8\n                            }\n                        )\n                    }\n                }\n            )\n    }\n\n    map.showYear = (year) => {\n        layerGroup.clearLayers()\n        layerGroup.addLayer(layers[year])\n    }\n\n    return map\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport L from 'leaflet'\nimport PropTypes from 'prop-types'\nimport Plot from 'react-plotly.js'\nimport { Button, Header, Pagination, Segment } from 'semantic-ui-react'\n\nimport SPECIES_DATA from '../../data/bay_area_mercury_species.json'\nimport CONFIG from '../../config'\n\nconst THRESHOLD_LINES = Object.entries(CONFIG.SPECIES_THRESHOLDS)\n    .map(([name, threshold], idx) => ({\n        'type': 'line',\n        'x0': idx - 0.5,\n        'y0': threshold,\n        'x1': idx + 0.5,\n        'y1': threshold,\n        'line': {\n            'color': 'red',\n            'width': 4,\n            'dash': 'dashdot',\n        }\n    }))\n\nconst SPECIES_BAR_DATA = {}\nconst SPECIES_BOX_DATA = {}\n\nObject\n    .entries(SPECIES_DATA)\n    .forEach(\n        ([year, sp]) => SPECIES_BOX_DATA[year] = Object\n            .entries(sp)\n            .sort()\n            .map(\n                ([name, result]) => ({\n                    y: result,\n                    type: 'box',\n                    name\n                })\n            )\n    )\n\nObject\n    .entries(SPECIES_DATA)\n    .forEach(\n        ([year, sp]) => SPECIES_BAR_DATA[year] = Object\n            .entries(sp)\n            .sort()\n            .reduce(\n                (data, [name, result]) => {\n                    data.x.push(name)\n                    data.y.push(result.reduce((r1, r2) => r1 + r2) / result.length)\n                    return data\n                },\n                { x: [], y: [], type: 'bar' }\n            )\n    )\n\nconst { START_YEAR, TOTAL_YEARS } = CONFIG\nconst END_YEAR = START_YEAR + TOTAL_YEARS\n\nclass Dashboard extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            year: START_YEAR,\n            autoPlay: false,\n            datarevision: 1\n        }\n    }\n\n    componentDidMount() {\n        this.handleYearChange(null, { activePage: START_YEAR })\n    }\n\n    handleYearChange = (e, { activePage }) => {\n        if (activePage >= START_YEAR && activePage < END_YEAR) {\n            this.props.map.showYear(activePage)\n            this.setState(\n                {\n                    year: activePage,\n                    datarevision: this.state.datarevision + 1\n                }\n            )\n        }\n    }\n\n    toggleAutoPlay = () => {\n        this.setState((state) => {\n            state.autoPlay = !state.autoPlay\n            if (state.autoPlay) {\n                this.autoPlay = setInterval(\n                    () => {\n                        let activePage = this.state.year + 1\n                        if (activePage === END_YEAR) {\n                            activePage = START_YEAR\n                        }\n                        this.handleYearChange(null, { activePage })\n                    },\n                    1000\n                )\n            } else {\n                clearInterval(this.autoPlay)\n            }\n            return state\n        })\n    }\n\n    render() {\n        const { autoPlay, year, datarevision } = this.state\n\n        return ReactDOM.createPortal(\n            <Segment basic textAlign=\"center\">\n                <Header>Sample Year</Header>\n                <Pagination\n                    activePage={year}\n                    boundaryRange={0}\n                    siblingRange={0}\n                    ellipsisItem={null}\n                    firstItem={null}\n                    lastItem={null}\n                    totalPages={END_YEAR + 2}\n                    onPageChange={this.handleYearChange}\n                />\n                <Button\n                    primary\n                    icon={autoPlay ? 'pause' : 'play'}\n                    style={{ marginLeft: 20 }}\n                    onClick={this.toggleAutoPlay}\n                />\n                <Plot\n                    data={[\n                        SPECIES_BAR_DATA[year]\n                    ]}\n                    layout={{\n                        width: 500,\n                        height: 350,\n                        datarevision,\n                        title: 'Mercury found in species tissues (ug/g ww)',\n                        showlegend: false,\n                        barmode: 'relative',\n                        yaxis: {\n                            range: CONFIG.SPECIES_RESULT_RANGE\n                        },\n                        shapes: THRESHOLD_LINES\n                    }}\n                    config={{ displayModeBar: false }}\n                />\n            </Segment>,\n            document.getElementById('Dashboard')\n        )\n    }\n}\n\nDashboard.propTypes = {\n    map: PropTypes.instanceOf(L.Map).isRequired\n}\n\nexport default Dashboard\n","import React, { Component } from 'react'\n\nimport initMap from './Map'\nimport Dashboard from './Dashboard'\n\nclass App extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            isMapReady: false\n        }\n    }\n    componentDidMount() {\n        this.map = initMap()\n        this.setState({ isMapReady: true })\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <div id=\"Map\" />\n                {this.state.isMapReady ? <Dashboard map={this.map} /> : null}\n            </React.Fragment>\n        )\n    }\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport 'semantic-ui/dist/semantic.css'\n\nimport './styles/index.css'\nimport App from './containers/App'\n\nReactDOM.render(<App />, document.getElementById('App'))\n"],"sourceRoot":""}